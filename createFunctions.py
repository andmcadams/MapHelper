from PIL import Image


# Get a range of chars for construction of dicts
# This uses ord, so make sure not to have your range go over
# any unwanted chars.
def char_range(cStart, cEnd):
    for c in range(ord(cStart), ord(cEnd)+1):
        yield chr(c)

# The autogenerated code is generated in a class so that it's easier to 
# collapse in editors/IDEs.

city_dict = {
	"subfolder": "city",
	"height": 18,
	"spaceLength": 5
}

kingdom_dict = {
	"subfolder": "kingdom",
	"height": 24,
	"spaceLength": 7
}

dictionaries = [city_dict, kingdom_dict]

print('# -----START AUTOGENERATED CODE-----')
print('class LetterPrinter:\n\t')

for d in dictionaries:
	for c in char_range('A', 'Z'):
		im = Image.open('letters/{}/{}.png'.format(d['subfolder'], c))
		print('\t@staticmethod\n\tdef letter_{}_{}():\n\t\treturn ({}, {})\n'.format(d['subfolder'], c, im.width, im.tobytes() + b'\x00\x00\x00\x00'*im.width*(d['height']-im.height)))	

	for c in char_range('a', 'z'):
		im = Image.open('letters/{}/{}.png'.format(d['subfolder'], c))
		print('\t@staticmethod\n\tdef letter_{}_{}():\n\t\treturn ({}, {})\n'.format(d['subfolder'], c, im.width, im.tobytes() + b'\x00\x00\x00\x00'*im.width*(d['height']-im.height)))

	print('\t@staticmethod\n\tdef letter_{}_space():\n\t\treturn ({}, None)\n'.format(d['subfolder'], d['spaceLength']))

#spaces are 7px in kingdom text
# print(""im.tobytes())

for d in dictionaries:
	print('LETTER_ARR_{} = {{'.format(d['subfolder'].upper()))
	keyVals = []
	for c in char_range('A', 'Z'):
		keyVals.append('\t\'{}\': LetterPrinter.letter_{}_{}'.format(c, d['subfolder'], c))

	for c in char_range('a', 'z'):
		keyVals.append('\t\'{}\': LetterPrinter.letter_{}_{}'.format(c, d['subfolder'], c))
	keyVals.append('\t\' \': LetterPrinter.letter_{}_space'.format(d['subfolder']))
	print(',\n'.join(keyVals))
	print('}')
print('# -----END AUTOGENERATED CODE-----')